import os################################ CONFIGURATION #################################ADD_CLR = os.environ.get('ADD_PRINTOUT_COLOUR', True)ADD_CLR = {    "0"     : False,    "-1"    : False,    "False" : False,    "1"     : True,    "True"  : True,    }.get(ADD_CLR, True)class VISUALCONFIG:    add_printout_color = ADD_CLR # boolean, if True return strings, else only display stdout    return_string      = False   # boolean, if True return strings, else only display stdout    VISUAL_CONFIG = VISUALCONFIG()################################################################################def header(x, n=70, filler="=", pop=False):    """print the content `x`, align centered, with filler `n` of length `n` """    if x is None or len(x) == 0:        f = filler*n    else:        x     = str(x)        l     = (n-len(x)-2)/2        front = int(l)        end   = int(l) if l%1 == 0 else int(l)+1        f     = filler*front+" "+x+" "+filler*end    return printc(f,pop=pop)def printc(x, color='{}', pop=None):    """    if pop is True:        return only the string `x` or `colored(x)`    else:        display `x` or `colored(x)`"""    pop = pop or VISUAL_CONFIG.return_string    if x is None:        return    x = color.format(x) if VISUAL_CONFIG.add_printout_color else x    if pop:        return x    print(x)def join_str(*args):    if len(args) == 0 or args[0] is None:        return    return ' '.join([str(i) for i in args])def white(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[1;37m{}\x1b[0m", pop)def black(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[30m{}\x1b[0m", pop)def dred(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[31m{}\x1b[0m",  pop)def dgreen(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[32m{}\x1b[0m", pop)def green(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[36m{}\x1b[0m", pop)def lgreen(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[1;32m{}\x1b[0m", pop)def red(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[1;31m{}\x1b[0m", pop)def dblue(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[34m{}\x1b[0m", pop)def violet(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[35m{}\x1b[0m", pop)def cyan(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[1;36m{}\x1b[0m", pop)def grey(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[37m{}\x1b[0m", pop)def yellow(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[1;33m{}\x1b[0m", pop)def pink(*args, pop=False, **kwargs):    return printc(join_str(*args), "\x1b[1;35m{}\x1b[0m", pop)